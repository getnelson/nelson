##: ----------------------------------------------------------------------------
##: Copyright (C) 2017 Verizon.  All Rights Reserved.
##:
##:   Licensed under the Apache License, Version 2.0 (the "License");
##:   you may not use this file except in compliance with the License.
##:   You may obtain a copy of the License at
##:
##:       http://www.apache.org/licenses/LICENSE-2.0
##:
##:   Unless required by applicable law or agreed to in writing, software
##:   distributed under the License is distributed on an "AS IS" BASIS,
##:   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##:   See the License for the specific language governing permissions and
##:   limitations under the License.
##:
##: ----------------------------------------------------------------------------
nelson {

  banned-clients {
    http-user-agents = [
      "NelsonCLI/0.1.70"
    ]
  }

  network {
    # only works where you have direct line of sight to the github enterprise.
    # would not work for github.com unless you're exposing your WAN IP publically.
    # export CURRENT_IP=`ifconfig en4 | grep inet | grep -v inet6 | awk '{print $2}'`
    external-host = "nelson.local"
    external-port = 9000
    enable-tls = false
  }

  security {
    # as this is a local dev token, keep it for ages and ages.
    expire-login-after = 365 days

    # for development sometimes we want to not have to actually log in
    # with github. when set to `true` this will force the system to "auto-auth"
    # the system based on local environment variables. This really is for
    # development use only!
    use-environment-session = true

    # These provide out-of-box values for development, and mean that
    # all development environments can decrypt and verify tokens
    # encrypted and signed by another.  We live with this tradeoff for
    # development convenience.
    #
    # Do *NOT* use these values in a production context.  You can generate
    # all of these with bin/generate-keys
    encryption-key = "aPq6t/sfhKomQaXlW25bgg=="
    signature-key = "AxHU7eFDtSBWvHsGCv9MSg=="
  }

  github {
    # uncomment if you want to use a custom github enterprise domain
    # domain = "$(NELSON_GITHUB_DOMAIN)"
    client-id = "$(NELSON_GITHUB_CLIENT)"
    client-secret = "$(NELSON_GITHUB_SECRET)"
    redirect-uri = "http://nelson.local:9000/auth/exchange"
    organization-blacklist = [
      "search",
      "3rdparty",
      "im-webops",
      "client"
    ]
  }

  database {
    driver     = "org.h2.Driver"
    # add this to the belown to get SQL tracing TRACE_LEVEL_FILE=4
    connection = "jdbc:h2:file:../db/dev;DATABASE_TO_UPPER=FALSE;AUTO_SERVER=TRUE;AUTO_SERVER_PORT=9090;"
  }

  docker {
    connection = "unix:///var/run/docker.sock"
  }

  datacenters {
    us-east-1 {
      docker-registry = "registry.service/units"

      # for development we don't have a usefull domain to use
      # so an empty value it shall be
      domain = ""

      traffic-shift {
        policy = "atomic"
        duration = 2 minute
      }

      infrastructure {
        scheduler {
          scheduler = "kubernetes"
          kubernetes {
            kubeconfig = "~/.kube/config"
            timeout = 1 second
          }
        }
        consul {
          endpoint  = "https://consul.service"
          timeout   = 1 second
        }
        vault {
          endpoint = "https://vault.service"
          auth-token = "..."
          timeout   = 1 second
        }
      }
    }
  }

  ui {
    enabled = true
    # file-path = "$(NELSON_UI_ROOT)/target/nelson/www"
  }

  workflow-logger {
    inbound-buffer-limit = 50
    file-path = "../logs"
  }

  default-namespace = "dev"

  template {
    # This has to be under our home directory, or else docker-machine
    # mounts an empty directory.
    #
    # https://github.com/docker/machine/issues/1826
    temp-dir = "$(PWD)/target"
  }
}
